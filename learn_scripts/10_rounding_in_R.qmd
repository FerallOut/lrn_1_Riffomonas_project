---
title: '10_rounding_numbers_in_R'
date: "16.Aug.2025"
date-modified: "today"
date-format: "DD.MMM.YYYY"
execute:
  echo: true
  warning: false
  #message: false

from: markdown+emoji
categories: [snakemake, rounding_numbers]
toc: true
toc-title: "Index"
smooth-scroll: true
toc-depth: 3
#fig-dpi: 300
format:
  html:
    embed-resources: true
    df-print: kable
    page-layout: full
    #code-overflow: wrap
    fig-width: 8
    fig-height: 6
code-line-numbers: true
number-sections: true
## to wrap output
include-in-header:
  - text: |
      <style>
      .cell-output-stdout code {
        word-break: break-wor !important;
        white-space: pre-wrap !important;
      }
      </style>
---

```{r}
#| label: setup
#| echo: false

all_times <- list()  # store the time for each chunk

knitr::knit_hooks$set(time_it = local({
  now <- NULL
  function(before, options) {
    if (before) {
      now <<- Sys.time()
    } else {
      res <- difftime(Sys.time(), now, units = "mins")
      all_times[[options$label]] <<- res
    }
  }
})
)

knitr::opts_chunk$set(
  # don't use, has issues with a lot of symbols
  # https://yihui.org/formatr/
  #tidy = TRUE,
  time_it = TRUE,
  fig.align = 'center',
  highlight = TRUE, 
  cache.lazy = FALSE,
  #comment = "#>",
  collapse = TRUE
)

## to crop the empty white space around the pdf plots
knitr::knit_hooks$set(crop = knitr::hook_pdfcrop)
```

```{r}
#| label: libraries_packages
#| output: false

## conda env: ./env_tar/smk_env1/

x <- c("tidyverse", "magrittr", "archive")

## Load libraries
invisible(lapply(x, library, character.only = TRUE))
```

## practice rounding in R

```{r}

rounding_ways <- tibble(x = seq(-2, 2, 0.1),
       ## ties a number to the nearest EVEN number
       round = round(x),
       
       ## simply remove decimals
       trunc = trunc(x),
       
       ## round to the next lowest integer
       floor = floor(x),
       
       ## round to the next highest integer
       ceiling = ceiling(x),
       
       ## make into an integer using the function = trunc, 
       ## but "trunc" outputs a double, 
       ## while 'as.integer' outputs an integer
       integer = as.integer(x),
       
       ## rounds to nr of significant digits
       ## signif digits != significant digits in the number, 
       ## it is the significant number of digits in the number
       ## see below
       signif = signif(x, digits = 1)
  )

rounding_ways
```

```{r}
x <- 100 * pi
x

round(x, digits = 4)  
round(x, digits = 2)
round(x, digits = 1)
round(x, digits = 0)
round(x, digits = -1)
round(x, digits = -2)
```

  
```{r}
signif(x, digits = 4)
signif(x, digits = 2)
signif(x, digits = 1)
signif(x, digits = 0)
signif(x, digits = -1)
signif(x, digits = -2)
```

# Rounding latitudes and longitudes

Rounding to nearest whole number or tenths of degrees

Load the data from the "ghcnd-stations.txt' to do a first approximation

## load data

Another way of reading a fwf files:

```{r}
## https://www.ncei.noaa.gov/pub/data/ghcn/daily/readme.txt

"Variable   Columns   Type
ID            1-11   Character
LATITUDE     13-20   Real
LONGITUDE    22-30   Real
ELEVATION    32-37   Real
STATE        39-40   Character
NAME         42-71   Character
GSN FLAG     73-75   Character
HCN/CRN FLAG 77-79   Character
WMO ID       81-85   Character"

read_fwf("../data/ghcnd-stations.txt",
         col_positions = fwf_cols(
           id = c(1, 11),
           latitude = c(13, 20),
           longitude = c(22, 30),
           elevation = c(32, 37),
           state = c(39, 40),
           name = c(42, 71),
           gsn_flag = c(73, 75),
           hcn_flag = c(77, 79),
           wmo_id = c(81, 85) )) %>% 
  head()

data_in <- read_fwf("../data/ghcnd-stations.txt",
         col_positions = fwf_cols(
           id = c(1, 11),
           latitude = c(13, 20),
           longitude = c(22, 30),
           elevation = c(32, 37),
           state = c(39, 40),
           name = c(42, 71),
           gsn_flag = c(73, 75),
           hcn_flag = c(77, 79),
           wmo_id = c(81, 85) ),
         col_select = c(id, latitude, longitude)) %T>%
  {head(.) %>% print()}
```

## test rounding

Check what kind of precision you have on the values and what rounding to use:

```{r}
data_in %T>% 
  {head(.) %>% print()} %>% 
  ## test various roundings
  mutate(latitude = round(latitude, 1),
         longitude = round(longitude, 1) )  %T>% 
  {head(.) %>% print()} %>%
  count(longitude, latitude) %>% 
  nrow()
## this rounding gave us 73.007 counts that will translate to just as many pixels
## reduce the precision further

data_in %T>% 
  {head(.) %>% print()} %>% 
  ## test various roundings
  mutate(latitude = round(latitude, 0),
         longitude = round(longitude, 0) )  %T>% 
  {head(.) %>% print()} %>%
  count(longitude, latitude) %>% 
  nrow()
## now we have 8.000 rows which is more reasonable -> we can still adjust it later
```

## group stations

```{r}
data_in %>% 
  mutate(latitude = round(latitude, 0),
         longitude = round(longitude, 0) )  %>% 
  group_by(longitude, latitude) %T>%
  ## nr of rows
  {nrow(.) %>% print()} %>% 
  count() %>% 
  ## nr of groups
  nrow(.) 
  

## add group nr to each row
data_in %>% 
  mutate(latitude = round(latitude, 0),
         longitude = round(longitude, 0) ) %>% 
  group_by(longitude, latitude) %>%
  mutate(region = cur_group_id()) %T>%
  {head(.) %>% print()} %>%
  count(region) %>% 
  arrange(-n) %>%
  {head(.) %>% print()} %>%
  write("../data/ghcnd_regions.tsv")
```




# Save time

```{r}
#| label: save_times

t(as.data.frame(all_times))
```

# Session information

```{r}
#| label: sessionInfo

sessionInfo()
```